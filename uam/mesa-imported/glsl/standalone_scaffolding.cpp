/*
 * Copyright Â© 2011 Intel Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

/* This file declares stripped-down versions of functions that
 * normally exist outside of the glsl folder, so that they can be used
 * when running the GLSL compiler standalone (for unit testing or
 * compiling builtins).
 */

#include "standalone_scaffolding.h"

#include <assert.h>
#include <stdio.h>
#include <string.h>
#include "util/ralloc.h"
#include "util/strtod.h"
#include "main/mtypes.h"

void
_mesa_warning(struct gl_context *ctx, const char *fmt, ...)
{
    va_list vargs;
    (void) ctx;

    va_start(vargs, fmt);

    /* This output is not thread-safe, but that's good enough for the
     * standalone compiler.
     */
    fprintf(stderr, "Mesa warning: ");
    vfprintf(stderr, fmt, vargs);
    fprintf(stderr, "\n");

    va_end(vargs);
}

// fincs-edit
void
_mesa_error_no_memory(const char *caller)
{
    fprintf(stderr, "Mesa error: out of memory in %s\n", caller);
}

void
_mesa_reference_shader_program_data(struct gl_context *ctx,
                                    struct gl_shader_program_data **ptr,
                                    struct gl_shader_program_data *data)
{
   (void) ctx;
   *ptr = data;
}

void
_mesa_reference_shader(struct gl_context *ctx, struct gl_shader **ptr,
                       struct gl_shader *sh)
{
   (void) ctx;
   *ptr = sh;
}

void
_mesa_reference_program_(struct gl_context *ctx, struct gl_program **ptr,
                         struct gl_program *prog)
{
   (void) ctx;
   *ptr = prog;
}

void
_mesa_shader_debug(struct gl_context *, GLenum, GLuint *,
                   const char *)
{
}

struct gl_shader *
_mesa_new_shader(GLuint name, gl_shader_stage stage)
{
   struct gl_shader *shader;

   assert(stage == MESA_SHADER_FRAGMENT || stage == MESA_SHADER_VERTEX);
   shader = rzalloc(NULL, struct gl_shader);
   if (shader) {
      shader->Stage = stage;
      shader->Name = name;
      shader->RefCount = 1;
   }
   return shader;
}

GLbitfield
_mesa_program_state_flags(UNUSED const gl_state_index16 state[STATE_LENGTH])
{
   return 0;
}

char *
_mesa_program_state_string(UNUSED const gl_state_index16 state[STATE_LENGTH])
{
   return NULL;
}

void
_mesa_delete_shader(struct gl_context *, struct gl_shader *sh)
{
   free((void *)sh->Source);
   free(sh->Label);
   ralloc_free(sh);
}

void
_mesa_delete_linked_shader(struct gl_context *,
                           struct gl_linked_shader *sh)
{
   ralloc_free(sh);
}

void
_mesa_clear_shader_program_data(struct gl_context *ctx,
                                struct gl_shader_program *shProg)
{
   for (unsigned i = 0; i < MESA_SHADER_STAGES; i++) {
      if (shProg->_LinkedShaders[i] != NULL) {
         _mesa_delete_linked_shader(ctx, shProg->_LinkedShaders[i]);
         shProg->_LinkedShaders[i] = NULL;
      }
   }

   shProg->data->NumUniformStorage = 0;
   shProg->data->UniformStorage = NULL;
   shProg->NumUniformRemapTable = 0;
   shProg->UniformRemapTable = NULL;
   shProg->UniformHash = NULL;

   ralloc_free(shProg->data->InfoLog);
   shProg->data->InfoLog = ralloc_strdup(shProg->data, "");

   ralloc_free(shProg->data->UniformBlocks);
   shProg->data->UniformBlocks = NULL;
   shProg->data->NumUniformBlocks = 0;

   ralloc_free(shProg->data->ShaderStorageBlocks);
   shProg->data->ShaderStorageBlocks = NULL;
   shProg->data->NumShaderStorageBlocks = 0;

   ralloc_free(shProg->data->AtomicBuffers);
   shProg->data->AtomicBuffers = NULL;
   shProg->data->NumAtomicBuffers = 0;
}

// fincs-edit: this function was copied from mesa/shaderapi.c
/**
 * Copy program-specific data generated by linking from the gl_shader_program
 * object to the gl_program object referred to by the gl_linked_shader.
 *
 * This function expects _mesa_reference_program() to have been previously
 * called setting the gl_linked_shaders program reference.
 */
void
_mesa_copy_linked_program_data(const struct gl_shader_program *src,
                               struct gl_linked_shader *dst_sh)
{
   assert(dst_sh->Program);

   struct gl_program *dst = dst_sh->Program;

   dst->info.separate_shader = src->SeparateShader;

   switch (dst_sh->Stage) {
   case MESA_SHADER_GEOMETRY: {
      dst->info.gs.vertices_in = src->Geom.VerticesIn;
      dst->info.gs.uses_end_primitive = src->Geom.UsesEndPrimitive;
      dst->info.gs.uses_streams = src->Geom.UsesStreams;
      break;
   }
   case MESA_SHADER_FRAGMENT: {
      dst->info.fs.depth_layout = src->FragDepthLayout;
      break;
   }
   case MESA_SHADER_COMPUTE: {
      dst->info.cs.shared_size = src->Comp.SharedSize;
      break;
   }
   default:
      break;
   }
}

void initialize_context_to_defaults(struct gl_context *ctx, gl_api api)
{
   memset(ctx, 0, sizeof(*ctx));

   ctx->API = api;

   ctx->Extensions.dummy_false = false;
   ctx->Extensions.dummy_true = true;

   // fincs-edit block start
   // Adapted from st_init_extensions

   // Extensions that are supported by all Gallium drivers
   ctx->Extensions.ARB_ES2_compatibility = GL_TRUE;
   ctx->Extensions.ARB_depth_texture = GL_TRUE;
   ctx->Extensions.ARB_draw_elements_base_vertex = GL_TRUE;
   ctx->Extensions.ARB_explicit_attrib_location = GL_TRUE;
   ctx->Extensions.ARB_explicit_uniform_location = GL_TRUE;
   ctx->Extensions.ARB_fragment_coord_conventions = GL_TRUE;
   ctx->Extensions.ARB_fragment_program = GL_TRUE;
   ctx->Extensions.ARB_fragment_program_shadow = GL_TRUE;
   ctx->Extensions.ARB_fragment_shader = GL_TRUE;
   ctx->Extensions.ARB_half_float_vertex = GL_TRUE;
   ctx->Extensions.ARB_internalformat_query = GL_TRUE;
   ctx->Extensions.ARB_internalformat_query2 = GL_TRUE;
   ctx->Extensions.ARB_map_buffer_range = GL_TRUE;
   ctx->Extensions.ARB_shadow = GL_TRUE;
   ctx->Extensions.ARB_sync = GL_TRUE;
   ctx->Extensions.ARB_texture_border_clamp = GL_TRUE;
   ctx->Extensions.ARB_texture_cube_map = GL_TRUE;
   ctx->Extensions.ARB_texture_env_combine = GL_TRUE;
   ctx->Extensions.ARB_texture_env_crossbar = GL_TRUE;
   ctx->Extensions.ARB_texture_env_dot3 = GL_TRUE;
   ctx->Extensions.ARB_vertex_program = GL_TRUE;
   ctx->Extensions.ARB_vertex_shader = GL_TRUE;
   ctx->Extensions.EXT_blend_color = GL_TRUE;
   ctx->Extensions.EXT_blend_func_separate = GL_TRUE;
   ctx->Extensions.EXT_blend_minmax = GL_TRUE;
   ctx->Extensions.EXT_gpu_program_parameters = GL_TRUE;
   ctx->Extensions.EXT_pixel_buffer_object = GL_TRUE;
   ctx->Extensions.EXT_point_parameters = GL_TRUE;
   ctx->Extensions.EXT_provoking_vertex = GL_TRUE;
   ctx->Extensions.EXT_stencil_two_side = GL_TRUE;
   ctx->Extensions.EXT_texture_env_dot3 = GL_TRUE;
   ctx->Extensions.ATI_fragment_shader = GL_TRUE;
   ctx->Extensions.ATI_texture_env_combine3 = GL_TRUE;
   ctx->Extensions.MESA_pack_invert = GL_TRUE;
   ctx->Extensions.NV_fog_distance = GL_TRUE;
   ctx->Extensions.NV_texture_env_combine4 = GL_TRUE;
   ctx->Extensions.NV_texture_rectangle = GL_TRUE;
   ctx->Extensions.OES_EGL_image = GL_TRUE;
   ctx->Extensions.OES_EGL_image_external = GL_TRUE;
   ctx->Extensions.OES_draw_texture = GL_TRUE;

   // Extensions that depend on higher GLSL versions
   ctx->Extensions.ARB_gpu_shader5 = GL_TRUE;
   ctx->Extensions.ARB_shader_precision = GL_TRUE;
   ctx->Extensions.AMD_vertex_shader_layer = GL_TRUE;
   ctx->Extensions.ARB_enhanced_layouts = GL_TRUE;

   // Extensions that either depend on GLSL 1.30 or are a subset thereof
   ctx->Extensions.ARB_conservative_depth = GL_TRUE;
   ctx->Extensions.ARB_shading_language_packing = GL_TRUE;
   ctx->Extensions.OES_depth_texture_cube_map = GL_TRUE;
   ctx->Extensions.ARB_shading_language_420pack = GL_TRUE;
   ctx->Extensions.ARB_texture_query_levels = GL_TRUE;
   ctx->Extensions.ARB_shader_bit_encoding = GL_TRUE;
   ctx->Extensions.EXT_shader_integer_mix = GL_TRUE;
   ctx->Extensions.ARB_arrays_of_arrays = GL_TRUE;
   ctx->Extensions.MESA_shader_integer_functions = GL_TRUE;

   // Other extensions
   ctx->Extensions.ARB_tessellation_shader = GL_TRUE;
   ctx->Extensions.OES_geometry_shader = GL_TRUE;
   ctx->Extensions.OES_sample_variables = GL_TRUE;
   ctx->Extensions.ARB_gpu_shader_fp64 = GL_TRUE;
   ctx->Extensions.ARB_vertex_attrib_64bit = GL_TRUE;
   ctx->Extensions.ARB_gpu_shader_int64 = GL_TRUE;
   ctx->Extensions.ARB_shader_storage_buffer_object = GL_TRUE;
   ctx->Extensions.ARB_shader_image_load_store = GL_TRUE;
   ctx->Extensions.ARB_shader_image_size = GL_TRUE;
   ctx->Extensions.ARB_shader_group_vote = GL_TRUE;
   ctx->Extensions.ARB_shader_ballot = GL_TRUE;
   ctx->Extensions.ARB_shader_atomic_counter_ops = GL_TRUE;
   ctx->Extensions.ARB_shader_viewport_layer_array = GL_TRUE;
   ctx->Extensions.NV_viewport_array2 = GL_TRUE;

   // Compute
   ctx->Extensions.ARB_compute_shader = GL_TRUE;
   ctx->Extensions.ARB_compute_variable_group_size = GL_TRUE;

   // ES compatibility (is this needed?)
   ctx->Extensions.ARB_ES3_compatibility = GL_TRUE;
   ctx->Extensions.ARB_ES3_1_compatibility = GL_TRUE;
   ctx->Extensions.ARB_ES3_2_compatibility = GL_TRUE;
   ctx->Extensions.OES_texture_cube_map_array = GL_TRUE;
   ctx->Extensions.OES_viewport_array = GL_TRUE;
   ctx->Extensions.OES_primitive_bounding_box = GL_TRUE;

   // Other extensions that were here originally
   ctx->Extensions.ARB_draw_instanced = GL_TRUE;
   ctx->Extensions.ARB_fragment_layer_viewport = GL_TRUE;
   ctx->Extensions.ARB_sample_shading = GL_TRUE;
   ctx->Extensions.ARB_shader_draw_parameters = GL_TRUE;
   ctx->Extensions.ARB_shader_stencil_export = GL_TRUE;
   ctx->Extensions.ARB_shader_texture_lod = GL_TRUE;
   ctx->Extensions.ARB_texture_cube_map_array = GL_TRUE;
   ctx->Extensions.ARB_texture_gather = GL_TRUE;
   ctx->Extensions.ARB_texture_multisample = GL_TRUE;
   ctx->Extensions.ARB_texture_query_lod = GL_TRUE;
   ctx->Extensions.ARB_uniform_buffer_object = GL_TRUE;
   ctx->Extensions.ARB_viewport_array = GL_TRUE;
   ctx->Extensions.ARB_cull_distance = GL_TRUE;
   ctx->Extensions.ARB_bindless_texture = GL_TRUE;
   ctx->Extensions.OES_standard_derivatives = GL_TRUE;
   ctx->Extensions.EXT_texture_array = GL_TRUE;

   // fincs-edit block end

   _mesa_locale_init();
}
